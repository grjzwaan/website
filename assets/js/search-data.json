{
  
    
        "post0": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://grjzwaan.github.io/website/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Posture of cats: machine learning with fast.ai",
            "content": "During a spare hour I decided to see how fast I could prototype something with the fast.ai library. The library is impressive, I can’t say otherwise. Very quickly I got a working prototype. The result was a fairly decent model to recognize the posture of a cat. . Fast.ai library . Recently I’ve decided to take a look at fast.ai, their course and their library. The best way to do this is to try something and it’s very likely you’ll end up with a cat-related topic. With my desk oriented towards the spot my cat was chilling, I decided to take the library for a spin and recognize cat postures. . To make the post self-contained I’ll note the snippets of code needed. As you’ll see it’s actually very little code - and every line is clear on what it does. . Note: Most of the code was copied from the example notebook in the course of fast.ai. . from fastai.vision import * from fastai.metrics import error_rate . The postures . I picked the first four postures that came to mind: . Lounging | Curled up | Sitting | Walking | . . Getting the data . There are some pictures of my cat but not sufficient. He is very lazy and is predominantly curled up. In the course of fast.ai they discussed the option to just use Google searches to get a dataset quickly. I have done this before, but they had some nice helpers to really make it a smooth experience: . 1) Do a Google Image search yourself. For example, search for “cats curled up” . 2) Run a JavaScript script they supply and obtain a file with urls . urls = Array.from(document.querySelectorAll(&#39;.rg_di .rg_meta&#39;)).map(el=&gt;JSON.parse(el.textContent).ou); window.open(&#39;data:text/csv;charset=utf-8,&#39; + escape(urls.join(&#39; n&#39;))); . 3) Run a function from their library to download and verify the images . download_images(&#39;path/urls_cats.csv&#39;, &#39;path/where/to/download/images&#39;, max_pics=200) verify_images(&#39;path/where/to/download/images&#39;, delete=True, max_size=500) . 4) Create a dataset . np.random.seed(42) # Set a fixed seed to always get the same train-validation split data = ImageDataBunch.from_folder(&quot;path/to/images&quot;, train=&quot;.&quot;, valid_pct=0.2, ds_tfms=get_transforms(), size=224, num_workers=4).normalize(imagenet_stats) . Training the neural network . Training the neural network is actually very simple . 5) Create the neural network: . learn = cnn_learner(data, models.resnet50, metrics=error_rate) . 6) Find a a good learning rate: . learn.lr_find(start_lr=1e-4) learn.recorder.plot() . 7) Train the neural network: . learn.fit_one_cycle(12, max_lr=2e-2) . There are some additional steps you can take to further finetune the model, but notice how easy it is? . Performance . The performance was actually quite decent: an error rate of 17%. Especially if you realize that the the distinction between classes is fuzzy and can be subtle. The images that the google search returned quite often confused lounging with curled up and sitting with lounging. . Even I’m not totally clear on the distinction between lounging and curled up in some cases :) . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . . Let’s plot the images the model was the most confused about, and highlight the areas that the model was focused on: . interp.plot_top_losses(9, figsize=(15,11)) . . Improvements . As you can see in the top losses, the samples contain some images that are no good: multiple cats or to far zoomed in. The easiest thing to do would be to get a better dataset and make a clear distinction between the classes. . How does it work . The cool thing fast.ai did in their course is to encode as many best practices in the library as they can. This means that you don’t start with a neural network from scratch: you take a network architecture that is tested in practices, is pretrained and you get sensible defaults. . In my case I used ResNet50 and then fine-tuned it with the cat data. This means you’re getting a lot for free! .",
            "url": "https://grjzwaan.github.io/website/2019/04/10/cature.html",
            "relUrl": "/2019/04/10/cature.html",
            "date": " • Apr 10, 2019"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://grjzwaan.github.io/website/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://grjzwaan.github.io/website/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}